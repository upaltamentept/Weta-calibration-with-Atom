/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 */

#include "sipAPIlibrviz_sip.h"

#line 7 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 45 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 16 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizConfigMapIterator.cpp"

#line 7 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 21 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizConfigMapIterator.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 24 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizConfigMapIterator.cpp"


extern "C" {static PyObject *meth_rviz_Config_MapIterator_advance(PyObject *, PyObject *);}
static PyObject *meth_rviz_Config_MapIterator_advance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::Config::MapIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_Config_MapIterator, &sipCpp))
        {
            sipCpp->advance();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MapIterator, sipName_advance, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_Config_MapIterator_isValid(PyObject *, PyObject *);}
static PyObject *meth_rviz_Config_MapIterator_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::Config::MapIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_Config_MapIterator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MapIterator, sipName_isValid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_Config_MapIterator_start(PyObject *, PyObject *);}
static PyObject *meth_rviz_Config_MapIterator_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::Config::MapIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_Config_MapIterator, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MapIterator, sipName_start, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_Config_MapIterator_currentKey(PyObject *, PyObject *);}
static PyObject *meth_rviz_Config_MapIterator_currentKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::Config::MapIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_Config_MapIterator, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->currentKey());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MapIterator, sipName_currentKey, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_Config_MapIterator_currentChild(PyObject *, PyObject *);}
static PyObject *meth_rviz_Config_MapIterator_currentChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::Config::MapIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_Config_MapIterator, &sipCpp))
        {
             ::rviz::Config*sipRes;

            sipRes = new  ::rviz::Config(sipCpp->currentChild());

            return sipConvertFromNewType(sipRes,sipType_rviz_Config,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MapIterator, sipName_currentChild, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_rviz_Config_MapIterator(void *, int);}
static void release_rviz_Config_MapIterator(void *sipCppV, int)
{
    delete reinterpret_cast< ::rviz::Config::MapIterator *>(sipCppV);
}


extern "C" {static void dealloc_rviz_Config_MapIterator(sipSimpleWrapper *);}
static void dealloc_rviz_Config_MapIterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_rviz_Config_MapIterator(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_rviz_Config_MapIterator[] = {
    {SIP_MLNAME_CAST(sipName_advance), meth_rviz_Config_MapIterator_advance, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_currentChild), meth_rviz_Config_MapIterator_currentChild, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_currentKey), meth_rviz_Config_MapIterator_currentKey, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isValid), meth_rviz_Config_MapIterator_isValid, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_start), meth_rviz_Config_MapIterator_start, METH_VARARGS, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_rviz_Config_MapIterator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_librviz_sip_rviz_Config_MapIterator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_rviz__Config__MapIterator,
        {SIP_NULLPTR},
        &plugin_rviz_Config_MapIterator
    },
    {
        sipNameNr_MapIterator,
        {2, 255, 0},
        5, methods_rviz_Config_MapIterator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_rviz_Config_MapIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_rviz_Config_MapIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
