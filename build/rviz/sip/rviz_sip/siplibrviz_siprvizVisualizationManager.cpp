/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 */

#include "sipAPIlibrviz_sip.h"

#line 7 "visualization_manager.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/visualization_manager.h>
#line 13 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"

#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 17 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "display_group.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/display_group.h>
#line 21 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "view_manager.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/view_manager.h>
#line 25 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "tool_manager.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/tool_manager.h>
#line 29 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 33 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "display.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/display.h>
#line 37 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 42 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 247 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 235 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 57 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 30 "/usr/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"


extern "C" {static PyObject *meth_rviz_VisualizationManager_initialize(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->initialize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_initialize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_startUpdate(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_startUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->startUpdate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_startUpdate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_stopUpdate(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_stopUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->stopUpdate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_stopUpdate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_createDisplay(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_createDisplay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        bool a2;
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1b", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2))
        {
             ::rviz::Display*sipRes;

            sipRes = sipCpp->createDisplay(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_rviz_Display,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_createDisplay, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_addDisplay(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_addDisplay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::Display* a0;
        bool a1;
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_rviz_Display, &a0, &a1))
        {
            sipCpp->addDisplay(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_addDisplay, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_removeAllDisplays(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_removeAllDisplays(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->removeAllDisplays();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_removeAllDisplays, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_load(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::rviz::Config* a0;
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_rviz_Config, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::rviz::VisualizationManager::load(*a0) : sipCpp->load(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_load, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_save(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::rviz::Config* a0;
        const  ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_rviz_Config, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::rviz::VisualizationManager::save(*a0) : sipCpp->save(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_save, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getFixedFrame(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getFixedFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->getFixedFrame());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getFixedFrame, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_setFixedFrame(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_setFixedFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFixedFrame(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_setFixedFrame, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getWallClock(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getWallClock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getWallClock();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getWallClock, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getROSTime(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getROSTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getROSTime();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getROSTime, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getWallClockElapsed(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getWallClockElapsed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getWallClockElapsed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getWallClockElapsed, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getROSTimeElapsed(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getROSTimeElapsed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getROSTimeElapsed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getROSTimeElapsed, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_resetTime(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_resetTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->resetTime();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_resetTime, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getToolManager(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getToolManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
             ::rviz::ToolManager*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::rviz::VisualizationManager::getToolManager() : sipCpp->getToolManager());

            return sipConvertFromType(sipRes,sipType_rviz_ToolManager,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getToolManager, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getViewManager(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getViewManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
             ::rviz::ViewManager*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::rviz::VisualizationManager::getViewManager() : sipCpp->getViewManager());

            return sipConvertFromType(sipRes,sipType_rviz_ViewManager,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getViewManager, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_lockRender(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_lockRender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->lockRender();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_lockRender, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_unlockRender(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_unlockRender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->unlockRender();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_unlockRender, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_queueRender(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_queueRender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->queueRender();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_queueRender, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getFrameCount(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getFrameCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            unsigned PY_LONG_LONG sipRes;

            sipRes = sipCpp->getFrameCount();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getFrameCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_notifyConfigChanged(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_notifyConfigChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->notifyConfigChanged();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_notifyConfigChanged, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_emitStatusUpdate(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_emitStatusUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->emitStatusUpdate(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_emitStatusUpdate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getRootDisplayGroup(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getRootDisplayGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
             ::rviz::DisplayGroup*sipRes;

            sipRes = sipCpp->getRootDisplayGroup();

            return sipConvertFromType(sipRes,sipType_rviz_DisplayGroup,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getRootDisplayGroup, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_rviz_VisualizationManager(void *, const sipTypeDef *);}
static void *cast_rviz_VisualizationManager(void *sipCppV, const sipTypeDef *targetType)
{
     ::rviz::VisualizationManager *sipCpp = reinterpret_cast< ::rviz::VisualizationManager *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_rviz_VisualizationManager(void *, int);}
static void release_rviz_VisualizationManager(void *sipCppV, int)
{
     ::rviz::VisualizationManager *sipCpp = reinterpret_cast< ::rviz::VisualizationManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_rviz_VisualizationManager(sipSimpleWrapper *);}
static void dealloc_rviz_VisualizationManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_rviz_VisualizationManager(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_rviz_VisualizationManager[] = {{4, 0, 1}};


static PyMethodDef methods_rviz_VisualizationManager[] = {
    {SIP_MLNAME_CAST(sipName_addDisplay), meth_rviz_VisualizationManager_addDisplay, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_createDisplay), meth_rviz_VisualizationManager_createDisplay, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_emitStatusUpdate), meth_rviz_VisualizationManager_emitStatusUpdate, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getFixedFrame), meth_rviz_VisualizationManager_getFixedFrame, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getFrameCount), meth_rviz_VisualizationManager_getFrameCount, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getROSTime), meth_rviz_VisualizationManager_getROSTime, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getROSTimeElapsed), meth_rviz_VisualizationManager_getROSTimeElapsed, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getRootDisplayGroup), meth_rviz_VisualizationManager_getRootDisplayGroup, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getToolManager), meth_rviz_VisualizationManager_getToolManager, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getViewManager), meth_rviz_VisualizationManager_getViewManager, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getWallClock), meth_rviz_VisualizationManager_getWallClock, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getWallClockElapsed), meth_rviz_VisualizationManager_getWallClockElapsed, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_initialize), meth_rviz_VisualizationManager_initialize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_load), meth_rviz_VisualizationManager_load, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_lockRender), meth_rviz_VisualizationManager_lockRender, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_notifyConfigChanged), meth_rviz_VisualizationManager_notifyConfigChanged, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_queueRender), meth_rviz_VisualizationManager_queueRender, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_removeAllDisplays), meth_rviz_VisualizationManager_removeAllDisplays, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_resetTime), meth_rviz_VisualizationManager_resetTime, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_save), meth_rviz_VisualizationManager_save, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setFixedFrame), meth_rviz_VisualizationManager_setFixedFrame, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_startUpdate), meth_rviz_VisualizationManager_startUpdate, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_stopUpdate), meth_rviz_VisualizationManager_stopUpdate, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_unlockRender), meth_rviz_VisualizationManager_unlockRender, METH_VARARGS, SIP_NULLPTR}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_rviz_VisualizationManager[] = {
    {"statusUpdate(QString)", SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {"configChanged()", SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {"timeChanged()", SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_rviz_VisualizationManager = {
    & ::rviz::VisualizationManager::staticMetaObject,
    0,
    signals_rviz_VisualizationManager,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_librviz_sip_rviz_VisualizationManager = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_rviz__VisualizationManager,
        {SIP_NULLPTR},
        &plugin_rviz_VisualizationManager
    },
    {
        sipNameNr_VisualizationManager,
        {0, 255, 0},
        24, methods_rviz_VisualizationManager,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_rviz_VisualizationManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_rviz_VisualizationManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_rviz_VisualizationManager,
    cast_rviz_VisualizationManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
