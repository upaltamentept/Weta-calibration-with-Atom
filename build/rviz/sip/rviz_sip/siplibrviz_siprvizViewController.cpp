/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 */

#include "sipAPIlibrviz_sip.h"

#line 7 "view_controller.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/view_controller.h>
#line 13 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"

#line 26 "/usr/share/sip/PyQt5/QtGui/qcursor.sip"
#include <qcursor.h>
#line 17 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 7 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 21 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 24 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 27 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 30 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 7 "property.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/properties/property.h>
#line 34 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 28 "/usr/share/sip/PyQt5/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 37 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 560 "/usr/share/sip/PyQt5/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 40 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpainter.sip"
#include <qpainter.h>
#line 43 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 48 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 247 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 235 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 63 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 30 "/usr/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizViewController.cpp"


extern "C" {static PyObject *meth_rviz_ViewController_formatClassId(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_formatClassId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::rviz::ViewController::formatClassId(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_formatClassId, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_getViewData(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_getViewData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_rviz_ViewController, &sipCpp, &a0, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::rviz::ViewController::getViewData(a0,a1) : sipCpp->getViewData(a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_getViewData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_getViewFlags(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_getViewFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_rviz_ViewController, &sipCpp, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::rviz::ViewController::getViewFlags(a0) : sipCpp->getViewFlags(a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_getViewFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_activate(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_activate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewController, &sipCpp))
        {
            sipCpp->activate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_activate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_update(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        float a0;
        float a1;
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_rviz_ViewController, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::rviz::ViewController::update(a0,a1) : sipCpp->update(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_update, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_lookAt(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_lookAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
        float a2;
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_rviz_ViewController, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->lookAt(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_lookAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_reset(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewController, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_ViewController, sipName_reset);
                return SIP_NULLPTR;
            }

            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_reset, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_mimic(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_mimic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::rviz::ViewController* a0;
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_ViewController, &sipCpp, sipType_rviz_ViewController, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::rviz::ViewController::mimic(a0) : sipCpp->mimic(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_mimic, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_transitionFrom(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_transitionFrom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::rviz::ViewController* a0;
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_ViewController, &sipCpp, sipType_rviz_ViewController, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::rviz::ViewController::transitionFrom(a0) : sipCpp->transitionFrom(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_transitionFrom, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_emitConfigChanged(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_emitConfigChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewController, &sipCpp))
        {
            sipCpp->emitConfigChanged();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_emitConfigChanged, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_getClassId(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_getClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewController, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::rviz::ViewController::getClassId() : sipCpp->getClassId()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_getClassId, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_setClassId(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_setClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_rviz_ViewController, &sipCpp, sipType_QString,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::rviz::ViewController::setClassId(*a0) : sipCpp->setClassId(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_setClassId, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_load(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::rviz::Config* a0;
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_ViewController, &sipCpp, sipType_rviz_Config, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::rviz::ViewController::load(*a0) : sipCpp->load(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_load, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_save(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::rviz::Config* a0;
        const  ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_ViewController, &sipCpp, sipType_rviz_Config, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::rviz::ViewController::save(*a0) : sipCpp->save(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_save, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_isActive(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewController, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_isActive, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_ViewController_getCursor(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewController_getCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::rviz::ViewController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewController, &sipCpp))
        {
             ::QCursor*sipRes;

            sipRes = new  ::QCursor((sipSelfWasArg ? sipCpp-> ::rviz::ViewController::getCursor() : sipCpp->getCursor()));

            return sipConvertFromNewType(sipRes,sipType_QCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewController, sipName_getCursor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_rviz_ViewController(void *, const sipTypeDef *);}
static void *cast_rviz_ViewController(void *sipCppV, const sipTypeDef *targetType)
{
     ::rviz::ViewController *sipCpp = reinterpret_cast< ::rviz::ViewController *>(sipCppV);

    if (targetType == sipType_rviz_Property)
        return static_cast< ::rviz::Property *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_rviz_ViewController(void *, int);}
static void release_rviz_ViewController(void *sipCppV, int)
{
     ::rviz::ViewController *sipCpp = reinterpret_cast< ::rviz::ViewController *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_rviz_ViewController(sipSimpleWrapper *);}
static void dealloc_rviz_ViewController(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_rviz_ViewController(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_rviz_ViewController[] = {{9, 255, 1}};


static PyMethodDef methods_rviz_ViewController[] = {
    {SIP_MLNAME_CAST(sipName_activate), meth_rviz_ViewController_activate, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_emitConfigChanged), meth_rviz_ViewController_emitConfigChanged, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_formatClassId), meth_rviz_ViewController_formatClassId, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getClassId), meth_rviz_ViewController_getClassId, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getCursor), meth_rviz_ViewController_getCursor, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getViewData), meth_rviz_ViewController_getViewData, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getViewFlags), meth_rviz_ViewController_getViewFlags, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isActive), meth_rviz_ViewController_isActive, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_load), meth_rviz_ViewController_load, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_lookAt), meth_rviz_ViewController_lookAt, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_mimic), meth_rviz_ViewController_mimic, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_reset), meth_rviz_ViewController_reset, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_save), meth_rviz_ViewController_save, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setClassId), meth_rviz_ViewController_setClassId, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_transitionFrom), meth_rviz_ViewController_transitionFrom, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_update), meth_rviz_ViewController_update, METH_VARARGS, SIP_NULLPTR}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_rviz_ViewController[] = {
    {"configChanged()", SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_rviz_ViewController = {
    & ::rviz::ViewController::staticMetaObject,
    0,
    signals_rviz_ViewController,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_librviz_sip_rviz_ViewController = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_rviz__ViewController,
        {SIP_NULLPTR},
        &plugin_rviz_ViewController
    },
    {
        sipNameNr_ViewController,
        {0, 255, 0},
        16, methods_rviz_ViewController,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_rviz_ViewController,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_rviz_ViewController,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_rviz_ViewController,
    cast_rviz_ViewController,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
