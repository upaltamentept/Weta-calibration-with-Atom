/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 */

#include "sipAPIlibrviz_sip.h"

#line 7 "bool_property.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/properties/bool_property.h>
#line 13 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"

#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 17 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 7 "property.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/properties/property.h>
#line 21 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 24 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 7 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 28 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 28 "/usr/share/sip/PyQt5/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 31 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 560 "/usr/share/sip/PyQt5/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 34 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpainter.sip"
#include <qpainter.h>
#line 37 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 40 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 146 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 48 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 247 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 235 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 30 "/usr/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"


class siprviz_BoolProperty : public  ::rviz::BoolProperty
{
public:
    siprviz_BoolProperty(const  ::QString&,bool,const  ::QString&, ::rviz::Property*,const char*, ::QObject*);
    virtual ~siprviz_BoolProperty();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool getBool() const SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    void removeChildren(int,int) SIP_OVERRIDE;
    bool setValue(const  ::QVariant&) SIP_OVERRIDE;
     ::QVariant getValue() const SIP_OVERRIDE;
    void setName(const  ::QString&) SIP_OVERRIDE;
     ::QString getName() const SIP_OVERRIDE;
    void setDescription(const  ::QString&) SIP_OVERRIDE;
     ::QString getDescription() const SIP_OVERRIDE;
    int numChildren() const SIP_OVERRIDE;
     ::rviz::Property* childAtUnchecked(int) const SIP_OVERRIDE;
     ::QVariant getViewData(int,int) const SIP_OVERRIDE;
     ::Qt::ItemFlags getViewFlags(int) const SIP_OVERRIDE;
    bool paint( ::QPainter*,const  ::QStyleOptionViewItem&) const SIP_OVERRIDE;
     ::QWidget* createEditor( ::QWidget*,const  ::QStyleOptionViewItem&) SIP_OVERRIDE;
     ::rviz::Property* takeChildAt(int) SIP_OVERRIDE;
    void addChild( ::rviz::Property*,int) SIP_OVERRIDE;
    void moveChild(int,int) SIP_OVERRIDE;
    void load(const  ::rviz::Config&) SIP_OVERRIDE;
    void save( ::rviz::Config) const SIP_OVERRIDE;
    void setHidden(bool) SIP_OVERRIDE;
    bool getHidden() const SIP_OVERRIDE;
    void setReadOnly(bool) SIP_OVERRIDE;
    bool getReadOnly() const SIP_OVERRIDE;
    void collapse() SIP_OVERRIDE;
    void expand() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    siprviz_BoolProperty(const siprviz_BoolProperty &);
    siprviz_BoolProperty &operator = (const siprviz_BoolProperty &);

    char sipPyMethods[32];
};

siprviz_BoolProperty::siprviz_BoolProperty(const  ::QString& a0,bool a1,const  ::QString& a2, ::rviz::Property*a3,const char*a4, ::QObject*a5):  ::rviz::BoolProperty(a0,a1,a2,a3,a4,a5), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siprviz_BoolProperty::~siprviz_BoolProperty()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *siprviz_BoolProperty::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_librviz_sip_qt_metaobject(sipPySelf,sipType_rviz_BoolProperty);

    return  ::rviz::BoolProperty::metaObject();
}

int siprviz_BoolProperty::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::rviz::BoolProperty::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_librviz_sip_qt_metacall(sipPySelf,sipType_rviz_BoolProperty,_c,_id,_a);

    return _id;
}

void *siprviz_BoolProperty::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_librviz_sip_qt_metacast(sipPySelf, sipType_rviz_BoolProperty, _clname, &sipCpp) ? sipCpp :  ::rviz::BoolProperty::qt_metacast(_clname));
}

bool siprviz_BoolProperty::getBool() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_getBool);

    if (!sipMeth)
        return  ::rviz::BoolProperty::getBool();

    extern bool sipVH_librviz_sip_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_librviz_sip_33(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void siprviz_BoolProperty::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::disconnectNotify(a0);
        return;
    }

    extern void sipVH_librviz_sip_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_librviz_sip_1(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void siprviz_BoolProperty::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::connectNotify(a0);
        return;
    }

    extern void sipVH_librviz_sip_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_librviz_sip_1(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void siprviz_BoolProperty::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::customEvent(a0);
        return;
    }

    extern void sipVH_librviz_sip_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_librviz_sip_2(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void siprviz_BoolProperty::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::childEvent(a0);
        return;
    }

    extern void sipVH_librviz_sip_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_librviz_sip_3(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void siprviz_BoolProperty::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::timerEvent(a0);
        return;
    }

    extern void sipVH_librviz_sip_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_librviz_sip_4(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool siprviz_BoolProperty::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::rviz::BoolProperty::eventFilter(a0,a1);

    extern bool sipVH_librviz_sip_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_librviz_sip_5(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool siprviz_BoolProperty::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::rviz::BoolProperty::event(a0);

    extern bool sipVH_librviz_sip_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_librviz_sip_6(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void siprviz_BoolProperty::removeChildren(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_removeChildren);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::removeChildren(a0,a1);
        return;
    }

    extern void sipVH_librviz_sip_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_librviz_sip_43(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool siprviz_BoolProperty::setValue(const  ::QVariant& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_setValue);

    if (!sipMeth)
        return  ::rviz::BoolProperty::setValue(a0);

    extern bool sipVH_librviz_sip_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&);

    return sipVH_librviz_sip_44(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant siprviz_BoolProperty::getValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_getValue);

    if (!sipMeth)
        return  ::rviz::BoolProperty::getValue();

    extern  ::QVariant sipVH_librviz_sip_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_librviz_sip_45(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void siprviz_BoolProperty::setName(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_setName);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::setName(a0);
        return;
    }

    extern void sipVH_librviz_sip_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_librviz_sip_46(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QString siprviz_BoolProperty::getName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_getName);

    if (!sipMeth)
        return  ::rviz::BoolProperty::getName();

    extern  ::QString sipVH_librviz_sip_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_librviz_sip_47(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void siprviz_BoolProperty::setDescription(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_setDescription);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::setDescription(a0);
        return;
    }

    extern void sipVH_librviz_sip_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_librviz_sip_46(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QString siprviz_BoolProperty::getDescription() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_getDescription);

    if (!sipMeth)
        return  ::rviz::BoolProperty::getDescription();

    extern  ::QString sipVH_librviz_sip_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_librviz_sip_47(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int siprviz_BoolProperty::numChildren() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_numChildren);

    if (!sipMeth)
        return  ::rviz::BoolProperty::numChildren();

    extern int sipVH_librviz_sip_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_librviz_sip_9(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::rviz::Property* siprviz_BoolProperty::childAtUnchecked(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_childAtUnchecked);

    if (!sipMeth)
        return  ::rviz::BoolProperty::childAtUnchecked(a0);

    extern  ::rviz::Property* sipVH_librviz_sip_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_librviz_sip_48(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant siprviz_BoolProperty::getViewData(int a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_getViewData);

    if (!sipMeth)
        return  ::rviz::BoolProperty::getViewData(a0,a1);

    extern  ::QVariant sipVH_librviz_sip_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH_librviz_sip_49(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::Qt::ItemFlags siprviz_BoolProperty::getViewFlags(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_getViewFlags);

    if (!sipMeth)
        return  ::rviz::BoolProperty::getViewFlags(a0);

    extern  ::Qt::ItemFlags sipVH_librviz_sip_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_librviz_sip_50(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool siprviz_BoolProperty::paint( ::QPainter*a0,const  ::QStyleOptionViewItem& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_paint);

    if (!sipMeth)
        return  ::rviz::BoolProperty::paint(a0,a1);

    extern bool sipVH_librviz_sip_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QStyleOptionViewItem&);

    return sipVH_librviz_sip_51(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QWidget* siprviz_BoolProperty::createEditor( ::QWidget*a0,const  ::QStyleOptionViewItem& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_createEditor);

    if (!sipMeth)
        return  ::rviz::BoolProperty::createEditor(a0,a1);

    extern  ::QWidget* sipVH_librviz_sip_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*,const  ::QStyleOptionViewItem&);

    return sipVH_librviz_sip_52(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::rviz::Property* siprviz_BoolProperty::takeChildAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_takeChildAt);

    if (!sipMeth)
        return  ::rviz::BoolProperty::takeChildAt(a0);

    extern  ::rviz::Property* sipVH_librviz_sip_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_librviz_sip_48(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void siprviz_BoolProperty::addChild( ::rviz::Property*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_addChild);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::addChild(a0,a1);
        return;
    }

    extern void sipVH_librviz_sip_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::rviz::Property*,int);

    sipVH_librviz_sip_53(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void siprviz_BoolProperty::moveChild(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_moveChild);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::moveChild(a0,a1);
        return;
    }

    extern void sipVH_librviz_sip_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_librviz_sip_43(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void siprviz_BoolProperty::load(const  ::rviz::Config& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_load);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::load(a0);
        return;
    }

    extern void sipVH_librviz_sip_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::rviz::Config&);

    sipVH_librviz_sip_39(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void siprviz_BoolProperty::save( ::rviz::Config a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_save);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::save(a0);
        return;
    }

    extern void sipVH_librviz_sip_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::rviz::Config);

    sipVH_librviz_sip_40(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void siprviz_BoolProperty::setHidden(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_setHidden);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::setHidden(a0);
        return;
    }

    extern void sipVH_librviz_sip_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_librviz_sip_10(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool siprviz_BoolProperty::getHidden() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_getHidden);

    if (!sipMeth)
        return  ::rviz::BoolProperty::getHidden();

    extern bool sipVH_librviz_sip_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_librviz_sip_33(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void siprviz_BoolProperty::setReadOnly(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_setReadOnly);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::setReadOnly(a0);
        return;
    }

    extern void sipVH_librviz_sip_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_librviz_sip_10(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool siprviz_BoolProperty::getReadOnly() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,SIP_NULLPTR,sipName_getReadOnly);

    if (!sipMeth)
        return  ::rviz::BoolProperty::getReadOnly();

    extern bool sipVH_librviz_sip_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_librviz_sip_33(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void siprviz_BoolProperty::collapse()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_collapse);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::collapse();
        return;
    }

    extern void sipVH_librviz_sip_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_librviz_sip_54(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void siprviz_BoolProperty::expand()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_expand);

    if (!sipMeth)
    {
         ::rviz::BoolProperty::expand();
        return;
    }

    extern void sipVH_librviz_sip_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_librviz_sip_54(sipGILState, sipImportedVirtErrorHandlers_librviz_sip_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QObject* siprviz_BoolProperty::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int siprviz_BoolProperty::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void siprviz_BoolProperty::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void siprviz_BoolProperty::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void siprviz_BoolProperty::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void siprviz_BoolProperty::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void siprviz_BoolProperty::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int siprviz_BoolProperty::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool siprviz_BoolProperty::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}


extern "C" {static PyObject *meth_rviz_BoolProperty_sender(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_BoolProperty, &sipCpp))
        {
             ::QObject*sipRes = 0;

#line 570 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }
#line 811 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_sender, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_receivers(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        const siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 601 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 868 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_receivers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_timerEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_childEvent(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_childEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_customEvent(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_customEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_connectNotify, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_disconnectNotify, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_senderSignalIndex(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_BoolProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_senderSignalIndex, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_isSignalConnected(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod* a0;
        const siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_isSignalConnected, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_getBool(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_getBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::rviz::BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_BoolProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::rviz::BoolProperty::getBool() : sipCpp->getBool());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_getBool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_setBool(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_setBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::rviz::BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setBool(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_setBool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_rviz_BoolProperty(void *, const sipTypeDef *);}
static void *cast_rviz_BoolProperty(void *sipCppV, const sipTypeDef *targetType)
{
     ::rviz::BoolProperty *sipCpp = reinterpret_cast< ::rviz::BoolProperty *>(sipCppV);

    if (targetType == sipType_rviz_Property)
        return static_cast< ::rviz::Property *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_rviz_BoolProperty(void *, int);}
static void release_rviz_BoolProperty(void *sipCppV, int)
{
     ::rviz::BoolProperty *sipCpp = reinterpret_cast< ::rviz::BoolProperty *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_rviz_BoolProperty(sipSimpleWrapper *);}
static void dealloc_rviz_BoolProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<siprviz_BoolProperty *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_rviz_BoolProperty(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_rviz_BoolProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_rviz_BoolProperty(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siprviz_BoolProperty *sipCpp = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
        bool a1 = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::rviz::Property* a3 = 0;
        const char* a4 = 0;
        PyObject *a4Keep = 0;
         ::QObject* a5 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "|J1bJ1J8AAJ8", sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State, sipType_rviz_Property, &a3, &a4Keep, &a4, sipType_QObject, &a5))
        {
            sipCpp = new siprviz_BoolProperty(*a0,a1,*a2,a3,a4,a5);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            Py_XDECREF(a4Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_rviz_BoolProperty[] = {{9, 255, 1}};


static PyMethodDef methods_rviz_BoolProperty[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_rviz_BoolProperty_childEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_rviz_BoolProperty_connectNotify, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_rviz_BoolProperty_customEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_rviz_BoolProperty_disconnectNotify, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_getBool), meth_rviz_BoolProperty_getBool, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), meth_rviz_BoolProperty_isSignalConnected, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_receivers), meth_rviz_BoolProperty_receivers, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_sender), meth_rviz_BoolProperty_sender, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), meth_rviz_BoolProperty_senderSignalIndex, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_setBool), meth_rviz_BoolProperty_setBool, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_rviz_BoolProperty_timerEvent, METH_VARARGS, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_rviz_BoolProperty = {
    & ::rviz::BoolProperty::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_librviz_sip_rviz_BoolProperty = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_rviz__BoolProperty,
        {SIP_NULLPTR},
        &plugin_rviz_BoolProperty
    },
    {
        sipNameNr_BoolProperty,
        {0, 255, 0},
        11, methods_rviz_BoolProperty,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_rviz_BoolProperty,
    SIP_NULLPTR,
    init_type_rviz_BoolProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_rviz_BoolProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_rviz_BoolProperty,
    cast_rviz_BoolProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
