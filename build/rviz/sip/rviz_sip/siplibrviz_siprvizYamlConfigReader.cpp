/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 */

#include "sipAPIlibrviz_sip.h"

#line 7 "yaml_config_reader.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/yaml_config_reader.h>
#line 13 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizYamlConfigReader.cpp"

#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 17 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizYamlConfigReader.cpp"
#line 7 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 21 "/home/pedro/ros/workspaces/atom/build/rviz/sip/rviz_sip/siplibrviz_siprvizYamlConfigReader.cpp"


extern "C" {static PyObject *meth_rviz_YamlConfigReader_readFile(PyObject *, PyObject *);}
static PyObject *meth_rviz_YamlConfigReader_readFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::Config* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::rviz::YamlConfigReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_rviz_YamlConfigReader, &sipCpp, sipType_rviz_Config, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->readFile(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_YamlConfigReader, sipName_readFile, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_YamlConfigReader_readString(PyObject *, PyObject *);}
static PyObject *meth_rviz_YamlConfigReader_readString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::Config* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString& a2def = "data string";
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::rviz::YamlConfigReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1|J1", &sipSelf, sipType_rviz_YamlConfigReader, &sipCpp, sipType_rviz_Config, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp->readString(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_YamlConfigReader, sipName_readString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_YamlConfigReader_error(PyObject *, PyObject *);}
static PyObject *meth_rviz_YamlConfigReader_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::YamlConfigReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_YamlConfigReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->error();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_YamlConfigReader, sipName_error, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_rviz_YamlConfigReader_errorMessage(PyObject *, PyObject *);}
static PyObject *meth_rviz_YamlConfigReader_errorMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::rviz::YamlConfigReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_YamlConfigReader, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorMessage());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_YamlConfigReader, sipName_errorMessage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_rviz_YamlConfigReader(void *, int);}
static void release_rviz_YamlConfigReader(void *sipCppV, int)
{
    delete reinterpret_cast< ::rviz::YamlConfigReader *>(sipCppV);
}


extern "C" {static void dealloc_rviz_YamlConfigReader(sipSimpleWrapper *);}
static void dealloc_rviz_YamlConfigReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_rviz_YamlConfigReader(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_rviz_YamlConfigReader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_rviz_YamlConfigReader(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::rviz::YamlConfigReader *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::rviz::YamlConfigReader();

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_rviz_YamlConfigReader[] = {
    {SIP_MLNAME_CAST(sipName_error), meth_rviz_YamlConfigReader_error, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_errorMessage), meth_rviz_YamlConfigReader_errorMessage, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_readFile), meth_rviz_YamlConfigReader_readFile, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_readString), meth_rviz_YamlConfigReader_readString, METH_VARARGS, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_rviz_YamlConfigReader = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_librviz_sip_rviz_YamlConfigReader = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_rviz__YamlConfigReader,
        {SIP_NULLPTR},
        &plugin_rviz_YamlConfigReader
    },
    {
        sipNameNr_YamlConfigReader,
        {0, 255, 0},
        4, methods_rviz_YamlConfigReader,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_rviz_YamlConfigReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_rviz_YamlConfigReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_rviz_YamlConfigReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
