class update_sensor_msgs_CameraInfo_b5aff04250fbf270b71bef9d82c2132e(MessageUpdateRule):
	old_type = "sensor_msgs/CameraInfo"
	old_full_text = """
std_msgs/Header header
uint32 height
uint32 width
string distortion_model
float64[] d
float64[9] k
float64[9] r
float64[12] p
uint32 binning_x
uint32 binning_y
sensor_msgs/RegionOfInterest roi
================================================================================
MSG: std_msgs/Header
uint32 seq
time stamp
string frame_id
================================================================================
MSG: sensor_msgs/RegionOfInterest
uint32 x_offset
uint32 y_offset
uint32 height
uint32 width
bool do_rectify
"""

	new_type = "sensor_msgs/CameraInfo"
	new_full_text = """
# This message defines meta information for a camera. It should be in a
# camera namespace and accompanied by up to 5 image topics named:
# 
# image_raw, image, image_color, image_rect, and image_rect_color
#
# The meaning of the camera parameters are described in detail at
# http://pr.willowgarage.com/wiki/Camera_Calibration.

Header header

# Resolution in pixels
uint32 height
uint32 width

########################
# Intrinsic parameters #
########################

# Distortion parameters: k1, k2, t1, t2, k3
# These model radial and tangential distortion of the camera.
float64[5]  D # 5x1 vector

# Original camera matrix
# Projects 3D points in the camera coordinate frame to 2D pixel
# coordinates using the focal lengths (fx, fy) and principal point
# (cx, cy):
#     [fx  0 cx]
# K = [ 0 fy cy]
#     [ 0  0  1]
float64[9]  K # 3x3 row-major matrix

########################
# Extrinsic parameters #
########################

# Rectification matrix (stereo cameras only)
# A homography which takes an image to the ideal stereo image plane
# so that epipolar lines in both stereo images are parallel.
float64[9]  R # 3x3 row-major matrix

# Projection/camera matrix
# Projects 3D points in a world coordinate frame to 2D pixel coordinates.
float64[12] P # 3x4 row-major matrix

================================================================================
MSG: std_msgs/Header
#Standard metadata for higher-level flow data types
#sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""

	order = 0
	migrated_types = [
		("Header","Header"),]

	valid = False

	def update(self, old_msg, new_msg):
		self.migrate(old_msg.header, new_msg.header)
		new_msg.height = old_msg.height
		new_msg.width = old_msg.width
		#No matching field name in old message
		new_msg.D = [0.,0.,0.,0.,0.]
		#No matching field name in old message
		new_msg.K = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
		#No matching field name in old message
		new_msg.R = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
		#No matching field name in old message
		new_msg.P = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
		#No field to match field distortion_model from old message
		#No field to match field d from old message
		#No field to match field k from old message
		#No field to match field r from old message
		#No field to match field p from old message
		#No field to match field binning_x from old message
		#No field to match field binning_y from old message
		#No field to match field roi from old message
