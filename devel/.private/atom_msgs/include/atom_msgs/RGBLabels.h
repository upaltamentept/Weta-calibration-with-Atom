// Generated by gencpp from file atom_msgs/RGBLabels.msg
// DO NOT EDIT!


#ifndef ATOM_MSGS_MESSAGE_RGBLABELS_H
#define ATOM_MSGS_MESSAGE_RGBLABELS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <atom_msgs/Detection2D.h>

namespace atom_msgs
{
template <class ContainerAllocator>
struct RGBLabels_
{
  typedef RGBLabels_<ContainerAllocator> Type;

  RGBLabels_()
    : pattern_name()
    , detected(false)
    , idxs()  {
    }
  RGBLabels_(const ContainerAllocator& _alloc)
    : pattern_name(_alloc)
    , detected(false)
    , idxs(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _pattern_name_type;
  _pattern_name_type pattern_name;

   typedef uint8_t _detected_type;
  _detected_type detected;

   typedef std::vector< ::atom_msgs::Detection2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::atom_msgs::Detection2D_<ContainerAllocator> >> _idxs_type;
  _idxs_type idxs;





  typedef boost::shared_ptr< ::atom_msgs::RGBLabels_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atom_msgs::RGBLabels_<ContainerAllocator> const> ConstPtr;

}; // struct RGBLabels_

typedef ::atom_msgs::RGBLabels_<std::allocator<void> > RGBLabels;

typedef boost::shared_ptr< ::atom_msgs::RGBLabels > RGBLabelsPtr;
typedef boost::shared_ptr< ::atom_msgs::RGBLabels const> RGBLabelsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atom_msgs::RGBLabels_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atom_msgs::RGBLabels_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atom_msgs::RGBLabels_<ContainerAllocator1> & lhs, const ::atom_msgs::RGBLabels_<ContainerAllocator2> & rhs)
{
  return lhs.pattern_name == rhs.pattern_name &&
    lhs.detected == rhs.detected &&
    lhs.idxs == rhs.idxs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atom_msgs::RGBLabels_<ContainerAllocator1> & lhs, const ::atom_msgs::RGBLabels_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atom_msgs::RGBLabels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atom_msgs::RGBLabels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atom_msgs::RGBLabels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atom_msgs::RGBLabels_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atom_msgs::RGBLabels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atom_msgs::RGBLabels_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atom_msgs::RGBLabels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "490746e211ca178da64659e6df5e160d";
  }

  static const char* value(const ::atom_msgs::RGBLabels_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x490746e211ca178dULL;
  static const uint64_t static_value2 = 0xa64659e6df5e160dULL;
};

template<class ContainerAllocator>
struct DataType< ::atom_msgs::RGBLabels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atom_msgs/RGBLabels";
  }

  static const char* value(const ::atom_msgs::RGBLabels_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atom_msgs::RGBLabels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string pattern_name\n"
"bool detected\n"
"Detection2D[] idxs\n"
"\n"
"================================================================================\n"
"MSG: atom_msgs/Detection2D\n"
"float32 x\n"
"float32 y\n"
"uint32 id\n"
"\n"
;
  }

  static const char* value(const ::atom_msgs::RGBLabels_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atom_msgs::RGBLabels_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pattern_name);
      stream.next(m.detected);
      stream.next(m.idxs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RGBLabels_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atom_msgs::RGBLabels_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atom_msgs::RGBLabels_<ContainerAllocator>& v)
  {
    s << indent << "pattern_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.pattern_name);
    s << indent << "detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detected);
    s << indent << "idxs[]" << std::endl;
    for (size_t i = 0; i < v.idxs.size(); ++i)
    {
      s << indent << "  idxs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::atom_msgs::Detection2D_<ContainerAllocator> >::stream(s, indent + "    ", v.idxs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATOM_MSGS_MESSAGE_RGBLABELS_H
