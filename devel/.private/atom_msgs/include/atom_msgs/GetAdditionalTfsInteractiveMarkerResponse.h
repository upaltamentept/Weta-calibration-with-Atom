// Generated by gencpp from file atom_msgs/GetAdditionalTfsInteractiveMarkerResponse.msg
// DO NOT EDIT!


#ifndef ATOM_MSGS_MESSAGE_GETADDITIONALTFSINTERACTIVEMARKERRESPONSE_H
#define ATOM_MSGS_MESSAGE_GETADDITIONALTFSINTERACTIVEMARKERRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atom_msgs
{
template <class ContainerAllocator>
struct GetAdditionalTfsInteractiveMarkerResponse_
{
  typedef GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> Type;

  GetAdditionalTfsInteractiveMarkerResponse_()
    : visible(false)
    , scale(0.0)  {
    }
  GetAdditionalTfsInteractiveMarkerResponse_(const ContainerAllocator& _alloc)
    : visible(false)
    , scale(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _visible_type;
  _visible_type visible;

   typedef float _scale_type;
  _scale_type scale;





  typedef boost::shared_ptr< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetAdditionalTfsInteractiveMarkerResponse_

typedef ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<std::allocator<void> > GetAdditionalTfsInteractiveMarkerResponse;

typedef boost::shared_ptr< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse > GetAdditionalTfsInteractiveMarkerResponsePtr;
typedef boost::shared_ptr< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse const> GetAdditionalTfsInteractiveMarkerResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator1> & lhs, const ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator2> & rhs)
{
  return lhs.visible == rhs.visible &&
    lhs.scale == rhs.scale;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator1> & lhs, const ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a13bc23ac434a77acb1a1c56a01ae850";
  }

  static const char* value(const ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa13bc23ac434a77aULL;
  static const uint64_t static_value2 = 0xcb1a1c56a01ae850ULL;
};

template<class ContainerAllocator>
struct DataType< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atom_msgs/GetAdditionalTfsInteractiveMarkerResponse";
  }

  static const char* value(const ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool visible\n"
"float32 scale\n"
"\n"
;
  }

  static const char* value(const ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.visible);
      stream.next(m.scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetAdditionalTfsInteractiveMarkerResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atom_msgs::GetAdditionalTfsInteractiveMarkerResponse_<ContainerAllocator>& v)
  {
    s << indent << "visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visible);
    s << indent << "scale: ";
    Printer<float>::stream(s, indent + "  ", v.scale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATOM_MSGS_MESSAGE_GETADDITIONALTFSINTERACTIVEMARKERRESPONSE_H
